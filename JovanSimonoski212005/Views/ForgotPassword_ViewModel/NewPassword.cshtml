@model JovanSimonoski212005.Models.NewPassword

@{
    ViewBag.Title = "NewPassword";
}

<h2>New Password</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <h2 style="color:red;"></h2>
    <div class="form-horizontal">
        <h4 style="color:red">@ViewBag.Message</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.User_Id)
        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @id = "passwordInput", @oninput = "checkPasswordStrength()" } })
                <div id="passwordStrength"></div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>
        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="submitButton" value="Submit" class="btn btn-default" onclick="hashPasswordAndSubmit()" disabled />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <script>
       async function hashPasswordAndSubmit() {
           // Get the password value
           var password = document.getElementById('passwordInput').value;

           // Hash the password using a simple example (SHA-256)
           var hashedPassword = await sha256(password);

           // Set the hashed password back to the input field
           document.getElementById('passwordInput').value = hashedPassword;

           //=========================================================
           // Get the password value
           password = document.getElementById('ConfirmPassword').value;

           // Hash the password using a simple example (SHA-256)
           hashedPassword = await sha256(password);

           // Set the hashed password back to the input field
           document.getElementById('ConfirmPassword').value = hashedPassword;
           //=========================================================

           // Submit the form
           document.forms[0].submit();
       }

       // Simple SHA-256 hashing function (for illustration purposes)
       async function sha256(input) {
           var buffer = new TextEncoder('utf-8').encode(input);
           var hashBuffer = await crypto.subtle.digest('SHA-256', buffer);

           var hashArray = Array.from(new Uint8Array(hashBuffer));
           var hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');
           return hashHex;
       }

       function checkPasswordStrength() {
          var password = $("#passwordInput").val();
          var strength = 0;

          // Check for both uppercase and lowercase characters
          if (password.match(/[a-z]/) && password.match(/[A-Z]/)) {
             strength += 1;
          }

          // Check for at least one number
          if (password.match(/\d+/)) {
             strength += 1;
          }

          // Check for special characters
          if (password.match(/.[!,@@,#,$,%,^,&,*,?,_,~,-,(,)]/)) {
             strength += 1;
           }

           // Check length
           if (password.length >= 8) {
               strength += 1;
           } else {
               strength = 0;
           }

          // Display the strength
          displayStrength(strength);
       }

       function displayStrength(strength) {
           var strengthIndicator = $("#passwordStrength");

           if (strength === 0) {
               strengthIndicator.html("Password Strength: <span style='color: red;'>Weak</span>");
               document.getElementById('submitButton').disabled = true;
               document.getElementById('submitButton').style.backgroundColor = 'white';
           } else if (strength <= 2) {
               strengthIndicator.html("Password Strength: <span style='color: sandybrown;'>Moderate</span>");
               document.getElementById('submitButton').disabled = false;
               document.getElementById('submitButton').style.backgroundColor = 'cadetblue';
           } else if (strength <= 3) {
               strengthIndicator.html("Password Strength: <span style='color: seagreen;'>Strong</span>");
               document.getElementById('submitButton').disabled = false;
               document.getElementById('submitButton').style.backgroundColor = 'cadetblue';
           } else {
               strengthIndicator.html("Password Strength: <span style='color: green;'>Very Strong</span>");
               document.getElementById('submitButton').disabled = false;
               document.getElementById('submitButton').style.backgroundColor = 'cadetblue';
           }
       }
    </script>
}
